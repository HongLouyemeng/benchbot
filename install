#!/bin/bash

################################################################################
########################## Settings & Pre-run Actions ##########################
################################################################################

# Settings
image_reference="benchbot/simulator:devel"
tmp_name="benchbot_manual"
not_found_text="${colour_red}NOT FOUND${colour_nc}"

# Start in root of benchbot_devel & ensure helpers exist
pushd $(dirname $0) >/dev/null
# TODO guarantee helpers submodule is initialised ...
source .helpers/bash

################################################################################
############################# Installation process #############################
################################################################################

# PART 1: Report the current state of the system
header_block "PART 1: EXAMINING SYSTEM STATE" $colour_blue

nvidia_driver_version=$(cat /proc/driver/nvidia/version 2>/dev/null | sed '/NVRM version/!d; s/.*Kernel Module *\([0-9.]*\).*/\1/')
if [ -z ${nvidia_driver_version} ]; then nvidia_driver_version="$not_found"; fi

cudart_version=$(apt list --installed 2>/dev/null | sed '/cuda-cudart-[0-9]*-[0-9]*/!d' | awk '{print $2}')
if [ -z ${cudart_version} ]; then cudart_version="$not_found"; fi

docker_version=$(docker --version 2>/dev/null | sed 's/Docker version \([^ ,]*\).*/\1/')
if [ -z ${docker_version} ]; then docker_version="$not_found"; fi

printf '%-25s' "Nvidia driver version:"; printf "${nvidia_driver_version}\n"
printf '%-25s' "Cuda runtime version:"; printf "${cudart_version}\n"
printf '%-25s' "Docker version:"; printf "${docker_version}\n"

echo -e "\nTODO: Ensure that Isaac sources are all available..."
echo "TODO: Provide instructions for how to fix issues"
echo "TODO: Stop you if you don't have at least required versions of dependencies, & Isaac sources..."

# Install any required dependencies
# TODO
# docker
# nvidia driver here???
# nvidia-docker (instructions here: https://github.com/NVIDIA/nvidia-docker)

# Ensure Isaac SDK is available (offer to do it for them if it hasn't been)
# TODO

# Ensure Isaac Sim is available (offer to do it for them if it hasn't been)
# TODO
# TODO include version number in the tgz somewhere
# git clone --depth 1 --single-branch --branch IsaacSim_1.2 https://github.com/NvPhysX/UnrealEngine IsaacSim
# pushd IsaacSim && git archive --format=tar.gz -o ../IsaacSim.tgz HEAD && popd
# rm -rf IsaacSim

# PART 2: Build the docker image (non-interactive)
header_block "PART 2: BUILDING THE DOCKER IMAGE" $colour_blue

old_image_id=$(docker images -q -f "reference=$image_reference")
docker build -t "${image_reference}" \
  --build-arg TZ=$(cat /etc/timezone) \
  --build-arg NVIDIA_DRIVER_VERSION="${nvidia_driver_version}" \
  --build-arg CUDART_VERSION="${cudart_version}" \
  --build-arg ISAAC_SDK_TGZ="./isaac/isaac-sdk-2019.2-30e21124.tar.xz" \
  --build-arg ISAAC_SIM_TGZ="./isaac/IsaacSim.tgz" \
  --build-arg ISAAC_SIM_GITDEPS_TGZ="./isaac/IsaacSimProject_1.2.1238533.gitdeps.tar.gz" .

build_ret=$?
if [ $build_ret -ne 0 ]; then
  echo "Docker build returned a non-zero error code: $build_ret"
  exit 1
fi

if $(docker history -q ${old_image_id} | sed '1d' | grep -q $(docker images -q -f="reference=$image_reference")); then
  docker tag ${old_image_id} ${image_reference}
  echo "${old_image_id}"
  echo "Existing docker for \"$image_reference\" was a parent; tag has been re-attached to existing image"
fi

# PART 3: Run post build actions (i.e. everything stuck behind the annoying
# interactive IsaacSim license prompt...)
# TODO somehow ensure we don't run this again unless we need to...
header_block "PART 3: BUILDING & INSTALLING ISAAC SIM (UE4)" $colour_blue

# Only run this if UE4 Isaac Sim is NOT already built in the docker image
if docker run --rm -it $image_reference /bin/bash -c "[ -f \"/home/benchbot/isaac_sim/Engine/Binaries/Linux/UE4Editor\" ]"; then
  echo "Found 'UE4Editor' in \"${image_reference}\". Skipping rebuilding."
else
  docker run --name "${tmp_name}" --gpus all -it "${image_reference}" \
    /bin/bash -c "sudo -H -u benchbot -- /bin/bash -c \"cd isaac_sim && \
    ./Setup.sh &&  ./GenerateProjectFiles.sh && ./GenerateTestRobotPaths.sh && \
    make && make IsaacSimProjectEditor\""

  docker commit --change='CMD ["/bin/bash", "-c"]' "${tmp_name}" "${image_reference}"
  docker rm "${tmp_name}"
fi

# We are finally done...
echo -e "\nFinished!"
