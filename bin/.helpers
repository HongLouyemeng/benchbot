#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

################################################################################
########################### Global BenchBot Settings ###########################
################################################################################

BRANCH_DEFAULT="master"

DOCKER_TAG_CORE="benchbot/core:base"
DOCKER_TAG_BACKEND="benchbot/backend:base"
DOCKER_TAG_SUBMISSION="benchbot/submission:base"
DOCKER_NETWORK="benchbot_network"

FILENAME_ENV_GROUND_TRUTH=".benchbot_object_maps"
FILENAME_ENV_METADATA=".benchbot_data_files"

GIT_API="https://github.com/roboticvisionorg/benchbot_api"
GIT_BATCHES="https://github.com/roboticvisionorg/benchbot_batches"
GIT_BENCHBOT="https://github.com/roboticvisionorg/benchbot"
GIT_CONTROLLER="https://github.com/roboticvisionorg/benchbot_robot_controller"
GIT_EVAL="https://github.com/roboticvisionorg/benchbot_eval"
GIT_EXAMPLES="https://github.com/roboticvisionorg/benchbot_examples"
GIT_SIMULATOR="https://github.com/roboticvisionorg/benchbot_simulator"
GIT_SUPERVISOR="https://github.com/roboticvisionorg/benchbot_supervisor"

HOSTNAME_DEBUG="benchbot_debug"
HOSTNAME_ROS="benchbot_ros"
HOSTNAME_ROBOT="benchbot_robot"
HOSTNAME_SUPERVISOR="benchbot_supervisor"

MD5_ISAAC_SDK="06387f9c7a02afa0de835ef07927aadf"

PATH_ROOT="$(realpath ..)"

PATH_API="$PATH_ROOT/api"
PATH_ADDONS="$PATH_ROOT/addons"
PATH_ADDONS_INTERNAL="/benchbot/addons"
PATH_BATCHES="$PATH_ROOT/batches"
PATH_DOCKERFILE_CORE="$PATH_ROOT/docker/core.Dockerfile"
PATH_DOCKERFILE_BACKEND="$PATH_ROOT/docker/backend.Dockerfile"
PATH_DOCKERFILE_SUBMISSION="$PATH_ROOT/docker/submission.Dockerfile"
PATH_EVAL="$PATH_ROOT/eval"
PATH_EXAMPLES="$PATH_ROOT/examples"
PATH_GROUND_TRUTH="$PATH_ROOT/ground_truth"
PATH_ISAAC_SRCS="$PATH_ROOT/isaac"
PATH_SYMLINKS="/usr/local/bin"

PORT_ROBOT=10000
PORT_SUPERVISOR=10000

SIZE_GB_FULL=128
SIZE_GB_LITE=15

URL_DEBUG="172.20.0.200"
URL_DOCKER_SUBNET="172.20.0.0/24"
URL_DOCKER_GATEWAY="172.20.0.254"
URL_ROS="172.20.0.100"
URL_ROBOT="172.20.0.101"
URL_SUPERVISOR="172.20.0.102"

################################################################################
################## Coloured terminal output & heading blocks ###################
################################################################################

colour_red='\033[0;31m'
colour_green='\033[0;32m'
colour_yellow='\033[0;33m'
colour_blue='\033[0;34m'
colour_magenta='\033[0;35m'
colour_nc='\033[0m'

function header_block() {
  header_text=${1:-"Header Block"}
  colour=${2:-${colour_red}}  # Red
  header_char=${3:-"#"}

  len=${#header_text}
  let "len_left=(78 - $len)/2" "len_right=(79 - $len)/2"

  echo -e "$colour"
  printf "%.0s${header_char}" $(seq 1 80); printf '\n'
  printf "%.0s${header_char}" $(seq 1 $len_left); printf " $header_text "; printf "%.0s${header_char}" $(seq $len_right); printf '\n'
  printf "%.0s${header_char}" $(seq 1 80)
  echo -e "$colour_nc\n"
}

################################################################################
######################## Helpers for managing BenchBot #########################
################################################################################

function clear_stdin() {
  read -t 0.1 -d '' -n 10000 discard || true
}

function close_network() {
  sudo sysctl net.ipv4.conf.all.forwarding=${1:-0}
  sudo iptables --policy FORWARD ${2:-DROP}
}

function eval_version() {
  # TODO this refers to evaluating whether an arbitrary version number meets
  # some arbitrary version requirement... it does not have anything to do with
  # benchbot_eval (this should be renamed to avoid confusion)

  # $1 = version number, $2 = required version number
  if [ -z "$1" ] || [[ ! "$1" == [0-9]* ]]; then
    return 2  # Bad version text
  elif [ "$1" = "$2" ] || [ "$2" = $(echo -e "$1\n$2" | sort -V | head -n 1) ]; then
    return 0  # Passes requirement
  else
    return 1  # Did not pass requirement
  fi
}

function kill_benchbot() {
  # TODO make this quieter when I am confident it works as expected...
  if [ -z "$1" ]; then
    header_block "CLEANING UP ALL BENCHBOT REMNANTS" ${colour_blue}
  fi

  targets=$(pgrep -f "docker attach benchbot" || true)
  if [ $(echo -n "$targets" | wc -l) -gt 0 ]; then
    echo -e "${colour_blue}Detached from the following containers:${colour_nc}"
    echo "$targets"
    for pid in "$targets"; do kill -9 $pid; done
  fi

  targets=$(docker ps -q -f name='benchbot*' || true)
  if [ $(echo -n "$targets" | wc -l) -gt 0 ]; then
    echo -e "\n${colour_blue}Stopped the following containers:${colour_nc}"
    docker stop $targets
  fi
  echo -e "\n${colour_blue}Deleted the following containers:${colour_nc}"
  docker system prune -f  # TODO this is still maybe a little too aggressive
  echo -e "\n${colour_blue}Finished cleaning!${colour_nc}\n"
}

function open_network() {
  sudo sysctl net.ipv4.conf.all.forwarding=1
  sudo iptables --policy FORWARD ACCEPT
}

function print_version_info() {
  hash=$(git rev-parse HEAD)
  version_name=$(git log --tags --no-walk --pretty='%H %D' | grep "$hash" | \
    sed 's/^[^ ]* //; s/,[^:]*//g; s/tag: //g; s/: /, /g')
  if [ -z "$version_name" ]; then
    version_name="__unnamed__"
  fi
  printf "BenchBot Software Stack.\n"
  printf "Version '%s', from branch '%s'\n" \
    "$version_name" "$(git name-rev --name-only HEAD)"
  printf "(%s)\n" "$hash"
}

function simulator_type() {
  echo "$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'echo "$BENCHBOT_SIMULATORS"' | tr -d '[:space:]')"
  return
}

################################################################################
############### Checking if updates are available for components ###############
################################################################################

function _is_latest_local_git() {
  # $1 = directory, $2 = repo URL, $3 = repo branch, $4 = verbose name of repo
  current_hash=$(cd "$1" > /dev/null 2>&1 && git rev-parse HEAD)
  latest_hash=$(git ls-remote "$2" "$3" | awk '{print $1}')
  if [ -z "$latest_hash" ]; then 
    echo -e "${colour_red}ERROR: Repo at $2 has no branch '$3'!${colour_nc}"
    return 2
  fi
  echo "Current $4: $current_hash"
  echo "Latest $4: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot() {
  _is_latest_local_git "$PATH_ROOT" "$GIT_BENCHBOT" "$1" \
    "BenchBot"
  return
}

function is_latest_benchbot_api() {
  _is_latest_local_git "$PATH_API" "$GIT_API" "$1" "BenchBot API"
  return
}

function is_latest_benchbot_controller() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_CONTROLLER_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_CONTROLLER" "$1" | awk '{print $1}')
  echo "Current BenchBot Robot Controller: $current_hash"
  echo "Latest BenchBot Robot Controller: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot_eval() {
  _is_latest_local_git "$PATH_EVAL" "$GIT_EVAL" "$1" "BenchBot Eval"
  return
}

function is_latest_benchbot_examples() {
  _is_latest_local_git "$PATH_EXAMPLES" "$GIT_EXAMPLES" "$1" \
    "BenchBot Examples"
  return
}

function is_latest_benchbot_simulator() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_SIMULATOR_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_SIMULATOR" "$1" | awk '{print $1}')
  echo "Current BenchBot Simulator: $current_hash"
  echo "Latest BenchBot Simulator: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot_supervisor() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_SUPERVISOR_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_SUPERVISOR" "$1" | awk '{print $1}')
  echo "Current BenchBot Supervisor: $current_hash"
  echo "Latest BenchBot Supervisor: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function latest_version_info() {
  # Expects the output of a is_latest_* call on stdin (use a pipe)
  echo "$(</dev/stdin)" | grep "Latest" | sed 's/[^:]*:\s*\(.*\)/\1/' | \
    sed 's/\s*$//'
}

function update_check() {
  # TODO: function could be implemented much more concisely...
  _valid_str="Up-to-date"
  _invalid_str="Outdated"
  _valid_text="BenchBot is up-to-date."
  _invalid_text=\
"WARNING: Please install the latest BenchBot software stack by re-running the 
\"benchbot_install\" command, or run this with [-f|--force-updateless] to skip
updates."

  echo -ne "Checking BenchBot version ...\t\t\t"
  is_latest_benchbot "$1" > /dev/null
  benchbot_valid=$?
  [ $benchbot_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot API version ...\t\t"
  is_latest_benchbot_api "$1" > /dev/null
  api_valid=$?
  [ $api_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot Eval version ...\t\t"
  is_latest_benchbot_eval "$1" > /dev/null
  eval_valid=$?
  [ $eval_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot Examples version ...\t\t"
  is_latest_benchbot_examples "$1" > /dev/null
  examples_valid=$?
  [ $examples_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot Simulator version ...\t\t"
  is_latest_benchbot_simulator "$1" > /dev/null
  simulator_valid=$?
  [ $simulator_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot Supervisor version ...\t"
  is_latest_benchbot_supervisor "$1" > /dev/null
  supervisor_valid=$?
  [ $supervisor_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."

  [ $benchbot_valid -eq 0 ] && [ $api_valid -eq 0 ] && \
    [ $eval_valid -eq 0 ] && [ $examples_valid -eq 0 ] && \
    [ $simulator_valid -eq 0 ] && [ $supervisor_valid -eq 0 ]
  valid=$?
  if [ $valid -eq 0 ]; then 
    echo -e "\n$colour_green$_valid_text$colour_nc"
  else
    echo -e "\n$colour_yellow$_invalid_text$colour_nc"; 
  fi
  return $valid
}

################################################################################
######################### BenchBot Add-ons Management ##########################
################################################################################

function run_manager_cmd() {
  pushd "$PATH_ADDONS" &> /dev/null
  bash call_manager "${1}" "${2-}" "${3-}"
  popd &> /dev/null
}

function install_addons() {
  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Installing add-ons based on the request string '${1}':"
  run_manager_cmd 'install_addons("'$1'")' '\n' '\n'
}

function list_addons() {
  run_manager_cmd  'print_state()' '\n' '\n\n'
}

function remove_addons() {
  run_manager_cmd 'remove_addons("'$1'")' '\n' '\n\n'
}
