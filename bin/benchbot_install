#!/usr/bin/env bash

################################################################################
################### Load Helpers & Global BenchBot Settings ####################
################################################################################

abs_path=$(readlink -f $0)
pushd $(dirname $abs_path) > /dev/null
source .helpers

################################################################################
########################### Script Specific Settings ###########################
################################################################################

# Hostnames
hostnames_block=\
"# BENCHBOT SPECIFIC HOSTNAMES
$URL_ROS $HOSTNAME_ROS
$URL_SIMULATOR $HOSTNAME_SIMULATOR
$URL_SUPERVISOR $HOSTNAME_SUPERVISOR"

################################################################################
########################### Definitions for messages ###########################
################################################################################
usage_text="$(basename "$abs_path") -- Install script for the BenchBot software stack

USAGE:

    Install the software stack:
        $(basename "$abs_path") 

    Install from scratch, & skip check for the latest software stack:
        $(basename "$abs_path") --no-update [-f|--force-clean]

    Uninstall the software stack:
        $(basename "$abs_path") [-u|--uninstall]

OPTION DETAILS:

    -h,--help
            Show this help menu.

    -b,--branch
            Specify a branch other than master to install. The only use for
            this flag is active development. The general user will never need
            to use this flag.

    -e,--envs-url
            Specify a custom URL to look for an \"environment information file\".
            An \"environment information file\" is a single line file with space-
            separated fields: MD5 checksum of environments *.zip, URL pointing
            to the environments *.zip, & plaintext version details. A general
            user should never need this flag.

            Multiple sets of environments can be installed by providing this
            flag multiple times:
                benchbot_install -e https://envs1.com -e https://envs2.com

    -f,--force-clean
            Forces an install of the BenchBot software stack from scratch. It
            will run uninstall, then the full install process.

    --no-update
            Skip checking for updates to the BenchBot software stack, & instead
            jump straight into the installation process.

    -u,--uninstall
            Uninstall the BenchBot software stack from the machine. All BenchBot
            related Docker images will be removed from the system, the API 
            removed from pip, & downloaded files removed from the BenchBot
            install. This flag is incompatible with all other flags.

    -v,--version
            Print version info for current installation.

FURTHER DETAILS:
    
    Please contact the authors of BenchBot for support or to report bugs:
        b.talbot@qut.edu.au
    "

build_err="\
  Ensure that Docker has been installed correctly AND that you can run Docker 
  WITHOUT root access (there is no need to ever run Docker with root). See 
  https://docs.docker.com/install/linux/linux-postinstall/ for details on how to 
  fix this. 

  If the error is more generic, please contact us so that we can update our
  pre-install host system checks.
"
envs_err="\
  Ensure that the URL: 
    "'$envs_url'"
  points to a single-line text file with whitespace-separated fields. The first 
  field contains the md5sum of the latest envs_*.zip, second field is URL of 
  envs_*.zip, final field (optional) is YYYYMMDD timestamp of zip. A working 
  internet connection also helps!
"

################################################################################
################### All checks for the host system (ouch...) ###################
################################################################################

checks_list_pre=(
  "Core host system checks:"
  "ubuntu1804"
  "Running Nvidia related system checks:"
  "nvidiacard"  # Is a valid graphics card available?
  "nvidiadriver"  # Is the driver available?
  "nvidiaversion"  # Is the driver version valid?
  "nvidiappa"  # Does the driver come from a supported PPA?
  "cudadriversavailable" # Is cuda-drivers package available?
  "cudadriversversion"  # Is cuda-drivers version valid?
  "cudadriversppa"  # Is cuda-drivers from the Nvidia PPA?
  "cudaavailable"  # Is CUDA available?
  "cudaversion"  # Is the cuda version valid?
  "cudappa"  # Is cuda from the Nvidia PPA?
  "isaac"  # Is the Isaac *.zip readily available?
  "Running Docker related system checks:"
  "dockeravailable"  # Is Docker available?
  "dockerversion"  # Is Docker version > 19.0?
  "dockernct"  # Is nvidia-container-toolkit installed?
  "dockerroot"  # Does Docker work WITHOUT root?
  "Running checks of filesystem used for Docker:"
  "fsext4"  # Is /var/lib/docker on an ext4 filesystem?
  "fsnosuid"  # Is /var/lib/docker on a filesystem WITHOUT nosuid?
  "fsspace"  # Is /var/lib/docker on a filesystem with enough space?
  "Miscellaneous requirements:"
  "pip" # Is pip available? (required to install Python libraries)
  "pythontk" # Is python-tk installed (required for matplotlib...)
  )

chk_ubuntu1804_name='Ubuntu version >= 18.04'
chk_ubuntu1804_pass='Passed ($check_result)'
chk_ubuntu1804_fail='Failed'
chk_ubuntu1804_check=\
'[ -f /tmp/benchbot_chk_ubuntu1804 ] && echo "skipped" || lsb_release -r | \
awk '"'"'{print $2}'"'"' 2>/dev/null'
chk_ubuntu1804_eval=\
'[ "$check_result" == "skipped" ] || eval_version "$check_result" "18.04"'
chk_ubuntu1804_issue="\
  The BenchBot Software Stack is designed to work with Ubuntu 18.04 & above.

  There is a possibility it may work with other versions, & other
  distributions, but it will probably involve manual installation of packages &
  installing missing tools.

  Given the complexity of the underlying system, it is strongly recommended to
  move to a supported operating system.

  If you would like to continue, & ignore this check, please say yes to the fix
  below.
  "
chk_ubuntu1804_fix='touch /tmp/benchbot_chk_ubuntu1804'
chk_ubuntu1804_reboot=1
  
chk_nvidiacard_name='Nvidia GPU available'
chk_nvidiacard_pass='Found card of type '"'"'$check_result'"'"
chk_nvidiacard_fail='None found'
chk_nvidiacard_check=\
'lspci -nn | grep -E "VGA.*\[10de:[0-9a-f]{4}\]" | \
sed -E '"'"'s/.*(10de:[0-9a-f]{4}).*/\1/'"'"' | head -n 1'
chk_nvidiacard_eval='[ ! -z "$check_result" ]'
chk_nvidiacard_issue="\
  No Nvidia Graphics Card was detected. If there is a card available on your 
  host system, then it should be visible in 'lspci -nn | grep VGA' with an ID
  of [10de:<product_id>]). For example, a GeForce 1080 appears as [10de:1b80]."
chk_nvidiacard_fix=''
chk_nvidiacard_reboot=0

chk_nvidiadriver_name='Nvidia driver is running'
chk_nvidiadriver_pass='Found' 
chk_nvidiadriver_fail='Not found'
chk_nvidiadriver_check='cat /proc/driver/nvidia/version 2>/dev/null'
chk_nvidiadriver_eval='[ ! -z "$check_result" ]'
chk_nvidiadriver_issue="\
  No Nvidia driver detected. If a driver is installed & loaded, it should be
  visible with 'nvidia-smi' or 'cat /proc/driver/nvidia/version'."
chk_nvidiadriver_fix=\
'v=$(. /etc/os-release; echo "$VERSION_ID" | sed "s/\.//") &&
wget "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu${v}/\
x86_64/cuda-ubuntu${v}.pin" &&
sudo mv cuda-ubuntu${v}.pin /etc/apt/preferences.d/cuda-repository-pin-600 &&
sudo apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/\
cuda/repos/ubuntu1804/x86_64/7fa2af80.pub" &&
sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/\
cuda/repos/ubuntu${v}/x86_64/ /" &&
sudo apt-get update && sudo apt-get -y install nvidia-driver-440'
chk_nvidiadriver_reboot=0

chk_nvidiaversion_name='Nvidia driver version valid'
chk_nvidiaversion_pass='Valid ($check_result)'
chk_nvidiaversion_fail='Invalid ($check_result)'
chk_nvidiaversion_check='cat /proc/driver/nvidia/version 2>/dev/null | '\
'sed '"'"'/NVRM version/!d; s/.*Kernel Module *\([0-9\.]*\).*/\1/'"'"
chk_nvidiaversion_eval='eval_version "$check_result" 418'
chk_nvidiaversion_issue="\
  The version of the running Nvidia driver ("'$check_result'") is incompatible
  with BenchBot which requires at least version 418 for the Isaac SDK.

  Please install a more recent version of the driver from the Nvidia repository."
chk_nvidiaversion_fix="$chk_nvidiadriver_fix"
chk_nvidiaversion_reboot=0

chk_nvidiappa_name='Nvidia driver from a standard PPA'
chk_nvidiappa_pass='PPA is valid'
chk_nvidiappa_fail='PPA is invalid'
chk_nvidiappa_check='version=$(apt list --installed 2>/dev/null | '\
'grep nvidia-driver- | sed '"'"'s/.*now \([^ ]*\).*/\1/'"'"'); '\
'apt download --print-uris nvidia-driver-$(echo $version | '\
'cut -d'"'"'.'"'"' -f1)=$version 2>/dev/null | cut -d'"'"' '"'"' -f1'
chk_nvidiappa_eval=\
'[[ "$check_result" =~ .*('"'"'developer.download.nvidia.com/'"'"'| \
'"'"'ppa.launchpad.net/graphics-drivers/ppa/ubuntu'"'"').* ]]'
chk_nvidiappa_issue="\
  The installed Nvidia driver was detected to have come from somewhere other
  than the Nvidia / Ubuntu graphics-drivers PPAs. The driver was sourced from:
    "'$check_result'"

  Our Docker container only supports official drivers, & GPUs only work in 
  containers if the driver version exactly matches the version of the host.
  Please use a driver from either of the following locations (the Nvidia PPA is
  preferred):
    http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64
    http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu"
chk_nvidiappa_fix=\
'sudo apt remove -y nvidia-driver-* && sudo apt -y autoremove; '\
"$chk_nvidiadriver_fix"
chk_nvidiappa_reboot=0

chk_cudadriversavailable_name='CUDA drivers installed'
chk_cudadriversavailable_pass='Drivers found'
chk_cudadriversavailable_fail='Drivers not found'
chk_cudadriversavailable_check='apt list --installed 2>/dev/null | grep -E '\
'"cuda-drivers/" | awk '"'"'{print $2}'"'"
chk_cudadriversavailable_eval='[ ! -z "$check_result" ]'
chk_cudadriversavailable_issue="\
  No version of CUDA drivers detected. Our Docker only supports CUDA drivers 
  installations from the official Nvidia repository. Please add the Nvidia 
  repository, & install 'cuda-drivers' through apt."
chk_cudadriversavailable_fix=\
"${chk_nvidiadriver_fix//nvidia-driver-440/cuda-drivers}"
chk_cudadriversavailable_reboot=1

chk_cudadriversversion_name='CUDA drivers version valid'
chk_cudadriversversion_pass='Valid ($check_result)'
chk_cudadriversversion_fail='Invalid'
chk_cudadriversversion_check='apt list --installed 2>/dev/null | grep -E '\
'"cuda-drivers/" | awk '"'"'{print $2}'"'"
chk_cudadriversversion_eval='eval_version "$check_result" 418'
chk_cudadriversversion_issue="\
  The version of CUDA drivers detected ("'$check_result'") is incompatible with 
  BenchBot which requires CUDA drivers 418+ for the Isaac SDK.

  Please install a more recent version of the CUDA drivers from the Nvidia 
  repository."
chk_cudadriversversion_fix=${chk_nvidiadriver_fix//nvidia-driver-440/cuda-drivers}
chk_cudadriversversion_reboot=1

chk_cudadriversppa_name='CUDA drivers from the Nvidia PPA'
chk_cudadriversppa_pass='PPA is valid'
chk_cudadriversppa_fail='PPA is invalid'
chk_cudadriversppa_check=\
'installed=$(apt list --installed 2>/dev/null | grep -E "cuda-drivers/" | \
awk '"'"'{print $2}'"'"'); \
apt download --print-uris cuda-drivers=\
$(echo $installed | sed '"'"'s/.*now \([^ ]*\).*/\1/'"'"') 2>/dev/null | \
cut -d'"'"' '"'"' -f1'
chk_cudadriversppa_eval=\
'[[ "$check_result" =~ .*('"'"'developer.download.nvidia.com/'"'"').* ]]'
chk_cudadriversppa_issue="\
  CUDA drivers were detected to have come from somewhere other than the Nvidia 
  PPAs. The CUDA drivers were sourced from:
    "'$check_result'"

  Our Docker container only supports official CUDA installs, & GPUs only work
  in containers if the CUDA drivers version exactly matches the version of the
  host.  Please install CUDA drivers from the official Nvidia repository:
    http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64"
chk_cudadriversppa_fix=\
'sudo apt remove -y cuda-drivers && sudo apt -y autoremove; '\
"${chk_nvidiadriver_fix//nvidia-driver-440/cuda-drivers}"
chk_cudadriversppa_reboot=1

chk_cudaavailable_name='CUDA is installed'
chk_cudaavailable_pass='CUDA found'
chk_cudaavailable_fail='CUDA not found'
chk_cudaavailable_check='apt list --installed 2>/dev/null | grep -E '\
'"cuda-[0-9]*-[0-9]*" | awk '"'"'{print $2}'"'"
chk_cudaavailable_eval='[ ! -z "$check_result" ]'
chk_cudaavailable_issue="\
  No version of CUDA detected. Our Docker only supports CUDA installations from
  the official Nvidia repository. Please add the Nvidia repository, & install 
  'cuda-10' through apt."
chk_cudaavailable_fix="${chk_nvidiadriver_fix//nvidia-driver-440/cuda-10-1}"
chk_cudaavailable_reboot=1

chk_cudaversion_name='CUDA version valid'
chk_cudaversion_pass='Valid ($check_result)'
chk_cudaversion_fail='Invalid'
chk_cudaversion_check=\
'cat /usr/local/cuda/version.txt 2>/dev/null | cut -d " " -f3'
chk_cudaversion_eval='eval_version "$check_result" 10'
chk_cudaversion_issue="\
  The version of CUDA detected ("'$check_result'") is incompatible with BenchBot
  which requires at least 10.0 for the Isaac SDK.

  Please install a more recent version of CUDA from the Nvidia repository."
chk_cudaversion_fix=${chk_nvidiadriver_fix//nvidia-driver-440/cuda-10-1}
chk_cudaversion_reboot=1

chk_cudappa_name='CUDA is from the Nvidia PPA'
chk_cudappa_pass='PPA is valid'
chk_cudappa_fail='PPA is invalid'
chk_cudappa_check=\
'installed=$(apt list --installed 2>/dev/null | grep -E "cuda-[0-9].*$(cat \
/usr/local/cuda/version.txt | cut -d " " -f 3)"); \
apt download --print-uris $(echo $installed | sed '"'"'s/^\([^\/]*\).*/\1/'"'"')=\
$(echo $installed | sed '"'"'s/.*now \([^ ]*\).*/\1/'"'"') 2>/dev/null | \
cut -d'"'"' '"'"' -f1'
chk_cudappa_eval=\
'[[ "$check_result" =~ .*('"'"'developer.download.nvidia.com/'"'"').* ]]'
chk_cudappa_issue="\
  CUDA was detected to have come from somewhere other than the Nvidia PPAs. The 
  CUDA package was sourced from:
    "'$check_result'"

  Our Docker container only supports official CUDA installs, & GPUs only work in 
  containers if the CUDA version exactly matches the version of the host.
  Please install CUDA from the official Nvidia repository:
    http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64"
chk_cudappa_fix=\
'sudo apt remove -y cuda-10* && sudo apt -y autoremove; '\
"${chk_nvidiadriver_fix//nvidia-driver-440/cuda-10-1}"
chk_cudappa_reboot=1

chk_isaac_name='Isaac SDK archive in '"'"'isaac'"'"' folder'
chk_isaac_pass='Found archive'
chk_isaac_fail='Not found'
chk_isaac_check='find $PATH_ISAAC_SRCS -type f -exec md5sum {} + | \
grep "$MD5_ISAAC_SDK" | tr -s " " | cut -d " " -f 2'
chk_isaac_eval='[ ! -z "$check_result" ]'
chk_isaac_issue="\
  "'$check_result'"
  Isaac SDK was not found in the folder:
    $(realpath $PATH_ISAAC_SRCS)

  Due to licensing restrictions we cannot automatically download this file.
  Please sign up for an Nvidia developer account, download the *.zip for Isaac 
  2019.2 from https://developer.nvidia.com/isaac/downloads, & place the *.zip
  in the 'isaac' folder of BenchBot (mentioned above). The 2019.2 version of
  Isaac is hidden under the 'Archive' section of the downloads page.

  This check will only pass when a file is found with the following MD5SUM:
    $MD5_ISAAC_SDK"
chk_isaac_fix=''
chk_isaac_reboot=1

chk_dockeravailable_name='Docker is available'
chk_dockeravailable_pass='Found'
chk_dockeravailable_fail='Not found'
chk_dockeravailable_check='docker --version 2>/dev/null'
chk_dockeravailable_eval='[ ! -z "$check_result" ]'
chk_dockeravailable_issue="\
  Docker was not detected on the host system ('docker --version' did not return
  a version).

  Please ensure Docker Engine - Community Edition is installed on the system."
chk_dockeravailable_fix=\
'sudo apt install -y apt-transport-https ca-certificates curl \
  software-properties-common &&
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
sudo add-apt-repository "deb [arch=amd64] \
  https://download.docker.com/linux/ubuntu '"$(lsb_release -cs)"' stable" &&
sudo apt update &&
sudo apt install -y docker-ce &&
sudo groupadd docker;
sudo usermod -aG docker '"$USER"
chk_dockeravailable_reboot=0

chk_dockerversion_name='Docker version valid'
chk_dockerversion_pass='Valid ($check_result)'
chk_dockerversion_fail='Invalid ($check_result)'
chk_dockerversion_check='docker --version 2>/dev/null | '\
'sed "s/Docker version \([^,]*\).*/\1/"'
chk_dockerversion_eval='eval_version "$check_result" 19.03'
chk_dockerversion_issue="\
  The version of Docker running ("'$check_result'") is incompatible with the 
  BenchBot built process which requires at least version 19.03 to use the
  Nvidia Container Toolkit.

  Please install a more recent version of Docker Engine - Community Edition."
chk_dockerversion_fix=\
'sudo apt remove -y docker* && sudo apt -y autoremove;
sudo apt-get install apt-transport-https ca-certificates curl \
  software-properties-common &&
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
sudo add-apt-repository "deb [arch=amd64] \
  https://download.docker.com/linux/ubuntu '"$(lsb_release -cs)"' stable" &&
sudo apt update &&
sudo apt install -y docker-ce &&
sudo groupadd docker;
sudo usermod -aG docker '"$USER"
chk_dockerversion_reboot=0

chk_dockernct_name='Nvidia Container Toolkit installed'
chk_dockernct_pass='Found ($check_result)'
chk_dockernct_fail='Not found'
chk_dockernct_check='nvidia-container-cli --version 2>/dev/null | head -n 1 | '\
'cut -d " " -f2'
chk_dockernct_eval='[ ! -z "$check_result" ]'
chk_dockernct_issue="\
  Nvidia Container Toolkit was not detected. It is required to allow Docker
  containers to access the GPU on your host system.

  Please install the toolkit from https://github.com/NVIDIA/nvidia-docker"
chk_dockernct_fix=\
'curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - &&
curl -s -L "https://nvidia.github.io/nvidia-docker/\
'"$(. /etc/os-release;echo $ID$VERSION_ID)"'/nvidia-docker.list" | \
  sudo tee /etc/apt/sources.list.d/nvidia-docker.list &&
sudo apt update && 
sudo apt install -y nvidia-container-toolkit &&
sudo systemctl restart docker'
chk_dockernct_reboot=1

chk_dockerroot_name='Docker runs without root'
chk_dockerroot_pass='Passed'
chk_dockerroot_fail='Failed'
chk_dockerroot_check='docker run hello-world &>/dev/null; echo $?'
chk_dockerroot_eval='[ $check_result -eq 0 ]'
chk_dockerroot_issue="\
  Docker failed to run the hello-world test.

  Usually this is caused by Docker not being configured to run without root. If
  the fix below fails to fix the issue (a restart / logout is required after
  changing groups), please run 'docker run hello-world' & resolve any issues
  that occur."
chk_dockerroot_fix=\
'sudo groupadd docker;
sudo usermod -aG docker '"$USER"
chk_dockerroot_reboot=0

chk_fsext4_name='/var/lib/docker on ext4 filesystem'
chk_fsext4_pass='Yes ($check_result)'
chk_fsext4_fail='No'
chk_fsext4_check=\
'if [ $(df -T /var/lib/docker | awk '"'"'/^\// {print $2}'"'"') == "ext4" ]; \
   then df -T /var/lib/docker | awk '"'"'/^\// {print $1}'"'"'; fi'
chk_fsext4_eval='[ ! -z "$check_result" ]'
chk_fsext4_issue="\
  The location of Docker images, '/var/lib/docker', is on partition '"'$check_result'"'
  which is not a fileystem of type 'ext4'. Non-ext4 filesystems have generally
  been found to produce unstable behaviour with Linux Docker images.

  Please move '/var/lib/docker/' to an ext4 drive for best results."
chk_fsext4_fix=\
'clear_stdin
read -p "New location for /var/lib/docker on an ext4 drive: " new_location
sudo systemctl stop docker
sudo mv /var/lib/docker "$new_location"
sudo ln -sv "$new_location" /var/lib/docker
sudo systemctl start docker'
chk_fsext4_reboot=1

chk_fsnosuid_name='/var/lib/docker supports suid'
chk_fsnosuid_pass='Enabled'
chk_fsnosuid_fail='Disabled'
chk_fsnosuid_check=\
'if [ -z $(cat /proc/mounts | grep $(df -T /var/lib/docker | \
awk '"'"'/^\// {print $1}'"'"') | grep "nosuid") ]; then \
   df -T /var/lib/docker | awk '"'"'/^\// {print $1}'"'"'; fi'
chk_fsnosuid_eval='[ ! -z "$check_result" ]'
chk_fsnosuid_issue="\
  Support for suid flags was not found on the drive holding /var/lib/docker:
  "'$check_result'"
  
  Please disable the nosuid option on the drive (by editing /etc/fstab, using
  the Ubuntu Disk UI, or any other method you prefer). "
chk_fsnosuid_fix=\
'sudo sed -E -n '"'"'s|(^[^#]*'"'"'$check_result'"'"' .*)nosuid|\1|p; s/,,/,/p; \
   s/ ,/ /p; s/, / /p'"'"' /etc/fstab &&
sudo systemctl daemon-reload'
chk_fsnosuid_reboot=1

chk_fsspace_name='/var/lib/docker driver space check'
chk_fsspace_pass='Sufficient space ($check_resultG)'
chk_fsspace_fail='Insufficient space ($check_resultG)'
chk_fsspace_check=\
'dup_space=$(docker images --filter "reference='$DOCKER_TAG_SIMULATOR'" \
  --format "{{.Size}}") &&
if [ -z "$dup_space" ]; 
  then dup_space=0; 
elif [ "${dup_space: -2}" == "GB" ]; 
  then dup_space=$(echo "${dup_space:0:-2}" | sed '"'"'s/\..*$//'"'"');
else 
  dup_space=0;
fi &&
space=$(df -Th -BG /var/lib/docker | awk '"'"'/^\// {print $5}'"'"') &&
space=$(echo "${space:0:-1}" | sed '"'"'s/\..*$//'"'"') &&
echo "$space+$dup_space" | bc'
chk_fsspace_eval='[ $check_result -gt 128 ]'
chk_fsspace_issue="\
  The drive holding /var/lib/docker needs at least 128GB free. This check takes
  into account if you already have BenchBot installed (it will add the size of
  the Docker image to your \"available space\").

  Please clear space from the drive, or run the following fix to move
  /var/lib/docker to a drive with more space."
chk_fsspace_fix=\
'clear_stdin
read -p "New location for /var/lib/docker with 128GB free: " new_location
sudo systemctl stop docker
sudo mv /var/lib/docker "$new_location"
sudo ln -sv "$new_location" /var/lib/docker
sudo systemctl start docker'
chk_fsspace_reboot=1

chk_pip_name='Pip python package manager available'
chk_pip_pass='Found ($check_result)'
chk_pip_fail='Not found'
chk_pip_check=\
'python3 -m pip --version 2>/dev/null | cut -d " " -f 2'
chk_pip_eval='[ ! -z "$check_result" ]'
chk_pip_issue="\
  Python package manager pip was not found. It is required for installation of
  BenchBot python modules. Please either restart the install script with pip
  available, or install it."
chk_pip_fix='sudo apt install -y python3-pip'
chk_pip_reboot=1

chk_pythontk_name='Tkinter for Python installed'
chk_pythontk_pass='Found'
chk_pythontk_fail='Not found'
chk_pythontk_check='python3 -c "import tkinter as tk; print(tk.__file__)" 2>/dev/null'
chk_pythontk_eval='[ ! -z "$check_result" ]'
chk_pythontk_issue="\
  Python package pythontk was not found. It is required to use the
  visualisation tools available with the BenchBot API. Please install it via
  package manager. "
chk_pythontk_fix='sudo apt install -y python3-tk'
chk_pythontk_reboot=1

checks_list_post=(
  "Validating the build against the host system:"
  "cudadriverdep"  # Does Nvidia driver satisfy cuda dep?
  "Validating BenchBot libraries on the host system:"
  "apicloned"
  "apiuptodate"
  "apiinstalled"
  "examplescloned"
  "examplesuptodate"
  "evalcloned"
  "evaluptodate"
  "evalinstalled"
  "Integrating BenchBot with the host system:"
  "hostsavail"
  "symlinks"
  )

chk_cudadriverdep_name='CUDA / Nvidia versions match'
chk_cudadriverdep_pass='Matches'
chk_cudadriverdep_fail='Does not match'
chk_cudadriverdep_check=\
'fn='"'"'echo "Nvidia: $(cat /proc/driver/nvidia/version | \
  sed "/NVRM version/!d; s/.*Kernel Module *\([0-9\.]*\).*/\1/"), \
  CUDA: $(cat /usr/local/cuda/version.txt | cut -d " " -f 3)"'"'"' &&
host=$(eval "$fn") && 
bb=$(docker run --rm -t '$DOCKER_TAG_CORE' /bin/bash -c "$fn" | \
  sed '"'"'s/[[:space:]]*$//'"'"') &&
eq=$([ "$host" == "$bb" ] && echo "==" || echo "!=") &&
printf "%s\n%s\n%s" "Host: $host" "BenchBot: $bb" "Result: $eq"'
chk_cudadriverdep_eval='[[ "$check_result" == *"=="* ]]'
chk_cudadriverdep_issue="\
  The CUDA / Nvidia driver version pairing in the installed BenchBot does not
  match the version on your host system, despite our best efforts:

"'$check_result'"

  This can sometimes happen due to the way CUDA / Nvidia driver pairings are
  passed through the apt dependency tree (cuda -> cuda-drivers ->
  nvidia-driver)

  BenchBot needs these to match between host & docker, so the best solution 
  available at this point is remove the existing CUDA install on the host 
  machine & reinstall. Please do this if we have identified this issue with your 
  host system setup."
chk_cudadriverdep_fix=\
'v=$(apt list --installed 2>/dev/null | grep "cuda-[0-9]*-[0-9]*") &&
if [ -z "$v" ]; then v="cuda-10-1"; fi &&
sudo apt remove -y "$v" && sudo apt -y autoremove && sudo apt install -y "$v"'
chk_cudadriverdep_reboot=1

chk_apicloned_name='BenchBot API cloned'
chk_apicloned_pass='Yes'
chk_apicloned_fail='No'
chk_apicloned_check=\
'git -C '"$PATH_API"' rev-parse --show-toplevel 2>/dev/null'
chk_apicloned_eval='[ "$check_result" == "$(realpath '"$PATH_API"')" ]'
chk_apicloned_issue="\
  The BenchBot API python library is not cloned on the host system. Having it
  installed significantly improves the development experience, & allows you to
  run your submissions natively without containerisation."
chk_apicloned_fix=\
'rm -rf '"$PATH_API"' && 
git clone '"$GIT_API $PATH_API"' &&
pushd '"$PATH_API"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && popd'
chk_apicloned_reboot=1

chk_apiuptodate_name='BenchBot API up-to-date'
chk_apiuptodate_pass='Up-to-date'
chk_apiuptodate_fail='Outdated'
chk_apiuptodate_check=\
'[ -d '"$PATH_API"' ] && git -C '"$PATH_API"' rev-parse HEAD && 
git ls-remote '"$GIT_API"' $BRANCH_DEFAULT | awk '"'"'{print $1}'"'"
chk_apiuptodate_eval='[ ! -z "$check_result" ] && 
  [ $(echo "$check_result" | uniq | wc -l) -eq 1 ]'
chk_apiuptodate_issue="\
  The version of the BenchBot API python library on the host system is out of
  date. The current version hash & latest version hash respectively are:

"'$check_result'"

  Please move to the latest version."
chk_apiuptodate_fix=\
'pushd '"$PATH_API"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && git pull && popd'
chk_apiuptodate_reboot=1

chk_apiinstalled_name='BenchBot API installed'
chk_apiinstalled_pass='Available'
chk_apiinstalled_fail='Not found'
chk_apiinstalled_check=\
'python3 -c '"'"'import benchbot_api; print(benchbot_api.__file__);'"'"' \
  2>/dev/null'
chk_apiinstalled_eval='[ ! -z "$check_result" ]'
chk_apiinstalled_issue="\
  BenchBot API was not found in python. It is either not installed, or the 
  current terminal is not correctly sourcing your installed python packages 
  (could be a virtual environment, conda, ROS, etc).

  Please do not run the automatic fix if you intend to source a different python
  environment before running BenchBot."
chk_apiinstalled_fix=\
'pushd '"$PATH_API"' &&  
python3 -m pip install -e . && popd'
chk_apiinstalled_reboot=1

chk_examplescloned_name='BenchBot examples cloned'
chk_examplescloned_pass='Yes'
chk_examplescloned_fail='No'
chk_examplescloned_check=\
'git -C '"$PATH_EXAMPLES"' rev-parse --show-toplevel 2>/dev/null'
chk_examplescloned_eval='[ "$check_result" == "$(realpath '"$PATH_EXAMPLES"')" ]'
chk_examplescloned_issue="\
  The BenchBot examples python library is not cloned on the host system. Having
  it installed provides hands on examples to get up & running with the BenchBot
  system, including introductions to all of the different challenge modes."
chk_examplescloned_fix=\
'rm -rf '"$PATH_EXAMPLES"' && 
git clone '"$GIT_EXAMPLES $PATH_EXAMPLES"' &&
pushd '"$PATH_EXAMPLES"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && popd'
chk_examplescloned_reboot=1

chk_examplesuptodate_name='BenchBot examples up-to-date'
chk_examplesuptodate_pass='Up-to-date'
chk_examplesuptodate_fail='Outdated'
chk_examplesuptodate_check=\
'[ -d '"$PATH_EXAMPLES"' ] && git -C '"$PATH_EXAMPLES"' rev-parse HEAD && 
git ls-remote '"$GIT_EXAMPLES"' $BRANCH_DEFAULT | awk '"'"'{print $1}'"'"
chk_examplesuptodate_eval='[ ! -z "$check_result" ] &&
  [ $(echo "$check_result" | uniq | wc -l) -eq 1 ]'
chk_examplesuptodate_issue="\
  The version of the BenchBot examples python library on the host system is out
  of date. The current version hash & latest version hash respectively are:

"'$check_result'"

  Please move to the latest version."
chk_examplesuptodate_fix=\
'pushd '"$PATH_EXAMPLES"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && git pull && popd'
chk_examplesuptodate_reboot=1

chk_evalcloned_name='BenchBot evaluation cloned'
chk_evalcloned_pass='Yes'
chk_evalcloned_fail='No'
chk_evalcloned_check=\
'git -C '"$PATH_EVAL"' rev-parse --show-toplevel 2>/dev/null'
chk_evalcloned_eval='[ "$check_result" == "$(realpath '"$PATH_EVAL"')" ]'
chk_evalcloned_issue="\
  The BenchBot evaluation python library is not cloned on the host system. Having it
  installed allows you to evaluate the performance of your semantic scene
  understanding algorithms directly from your machine."
chk_evalcloned_fix=\
'rm -rf '"$PATH_EVAL"' && 
git clone '"$GIT_EVAL $PATH_EVAL"' &&
pushd '"$PATH_EVAL"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && popd'
chk_evalcloned_reboot=1

chk_evaluptodate_name='BenchBot evaluation up-to-date'
chk_evaluptodate_pass='Up-to-date'
chk_evaluptodate_fail='Outdated'
chk_evaluptodate_check=\
'[ -d '"$PATH_EVAL"' ] && git -C '"$PATH_EVAL"' rev-parse HEAD && 
git ls-remote '"$GIT_EVAL"' $BRANCH_DEFAULT | awk '"'"'{print $1}'"'"
chk_evaluptodate_eval='[ ! -z "$check_result" ] &&
  [ $(echo "$check_result" | uniq | wc -l) -eq 1 ]'
chk_evaluptodate_issue="\
  The version of the BenchBot evaluation python library on the host system is
  out of date. The current version hash & latest version hash respectively are:

"'$check_result'"

  Please move to the latest version."
chk_evaluptodate_fix=\
'pushd '"$PATH_EVAL"' && 
git fetch --all && git checkout $BRANCH_DEFAULT && git pull && popd'
chk_evaluptodate_reboot=1

chk_evalinstalled_name='BenchBot evaluation installed'
chk_evalinstalled_pass='Available'
chk_evalinstalled_fail='Not found'
chk_evalinstalled_check=\
'python3 -c '"'"'import benchbot_eval; print(benchbot_eval.__file__);'"'"' \
  2>/dev/null'
chk_evalinstalled_eval='[ ! -z "$check_result" ]'
chk_evalinstalled_issue="\
  BenchBot evaluation was not found in python. It is either not installed, or
  the current terminal is not correctly sourcing your installed python packages
  (could be a virtual environment, conda, ROS, etc).

  Please do not run the automatic fix if you intend to source a different python
  environment before running BenchBot."
chk_evalinstalled_fix=\
'pushd '"$PATH_EVAL"' && 
python3 -m pip install -e . && popd'
chk_evalinstalled_reboot=1

chk_hostsavail_name='BenchBot hosts available'
chk_hostsavail_pass='Found'
chk_hostsavail_fail='Not found'
chk_hostsavail_check=\
'getent hosts benchbot_ros benchbot_simulator benchbot_supervisor'
chk_hostsavail_eval='[ $(echo "$check_result" | wc -l) -eq 3 ]'
chk_hostsavail_issue="\
  The hosts benchbot_ros, benchbot_simulator, & benchbot_supervisor were not
  found on the host system. Only the following hosts were found (may be empty):

"'$check_result'"

  Having all hosts available to your system allows the BenchBot software stack
  to communicate between each of the individual components. Please add the host
  to your /etc/hosts file."
chk_hostsavail_fix=\
'echo -e "$hostnames_block" | sudo tee -a /etc/hosts'
chk_hostsavail_reboot=1

chk_symlinks_name='BenchBot symlinks available'
chk_symlinks_pass='Found'
chk_symlinks_fail='Not found'
chk_symlinks_check=\
'[ -e "'$PATH_SYMLINKS'/benchbot_install" ] && 
  [ -e "'$PATH_SYMLINKS'/benchbot_run" ] &&
  [ -e "'$PATH_SYMLINKS'/benchbot_submit" ] &&
  [ -e "'$PATH_SYMLINKS'/benchbot_eval" ] &&
  [ -e "'$PATH_SYMLINKS'/benchbot_batch" ] &&
  ls -l "'$PATH_SYMLINKS'/benchbot_"* | cut -d " " -f 9-11'
chk_symlinks_eval='[ ! -z "$check_result" ]'
chk_symlinks_issue="\
  Symbolic links for each of the 5 BenchBot scripts were not found. If you do 
  not wish to add symbolic links, or would rather add the './bin/' directory to
  your PATH, please skip this step."
chk_symlinks_fix=\
'sudo ln -svf '"$(dirname $abs_path)"'/* '"$PATH_SYMLINKS"
chk_symlinks_reboot=1

################################################################################
######################## Helper functions for commands #########################
################################################################################

function cleanup_terminal() {
  printf "${colour_nc}"
}

function handle_requirement() {
  required=${2:-0}

  # Dirtily pull all of the check-related values based from the input argument
  name=$(eval 'echo "$chk_'$1'_name"')
  pass=$(eval 'echo "$chk_'$1'_pass"')
  fail=$(eval 'echo "$chk_'$1'_fail"')
  check=$(eval 'echo "$chk_'$1'_check"')
  evaluate=$(eval 'echo "$chk_'$1'_eval"')
  issue=$(eval 'echo "$chk_'$1'_issue"')
  fix=$(eval 'echo "$chk_'$1'_fix"')
  reboot=$(eval 'echo "$chk_'$1'_reboot"')

  # Perform the check, printing the result & resolving issues if possible
  retval=0
  printf "\t$name: "
  check_result=$(eval "$check")
  printf "\033[46G"
  if $(eval $evaluate); then 
    printf "${colour_green}%35s" "${pass//'$check_result'/$check_result}"
    retval=0
  else 
    printf "${colour_yellow}%35s\n${colour_nc}" \
      "${fail//'$check_result'/$check_result}"
    printf "\n${colour_yellow}%s\n" "${issue//'$check_result'/$check_result}"
    if [ -z "$fix" ]; then
      printf "\n  No automatic fix is available.\n"
      unresolved=1
    else
      printf "\n  The following commands can be run to try & fix the issue:\n"
      printf "\n%s\n\n" "${fix//'$check_result'/$check_result}"
      clear_stdin
      read -n 1 -r -p "  Would you like the above commands to be run (y/N)? " \
        apply_fix
      if [[ "$apply_fix" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
        printf "\n\n${colour_nc}"
        eval "$fix"
        unresolved=$?
        printf "\n${colour_yellow}"
        if [ "$reboot" -eq 0 ] && [ $unresolved -eq 0 ]; then
          s="Please reboot your machine before re-running the install script." 
          printf "\n  $s"
          retval=1
        elif [ $unresolved -eq 0 ] && [ $required -eq 0 ]; then
          printf "\n  Restarting the installation script ...\n"
          retval=2
        fi
      else
        unresolved=1
      fi
    fi
    if [ $unresolved -ne 0 ] && [ $required -eq 0 ]; then
      s="Failed to solve issue. Please manually resolve, & re-run the "
      s+="install script."
      printf "\n  $s"
      retval=1
    elif [ $required -ne 0 ]; then
      printf "\n"
    fi
  fi
  printf "${colour_nc}\n"
  return $retval
}

function uninstall_benchbot() {
  kill_benchbot

  header_block "UNINSTALLING BENCHBOT" ${colour_blue}

  pkgs=$(python3 -m pip freeze | grep benchbot)
  if [ ! -z "$pkgs" ]; then
    echo "$pkgs" | sed 's/.*egg=\(.*\)/\1/' | xargs python3 -m pip uninstall -y
  fi
  sitepkgs=($(python3 -c 'import site; \
    print(" ".join(site.getsitepackages() + [site.getusersitepackages()]))' \
    2>/dev/null))
  if [ ! -z "$sitepkgs" ] ; then 
    echo "Manually removing eggs from pip ..."
    # This fix is needed as apparently Ubuntu patches broke pip uninstall...
    # See: https://github.com/pypa/pip/issues/4438
    for l in "${sitepkgs[@]}"; do
      # The loop below is WAY TOO AGGRESSIVE... but I can't do anything else
      # due to the bug above, & inconsistency of where this file will be saved
      # between raw python install, virtualenvs, conda, etc etc
      find "$l" -regex '.*benchbot-\(api\|eval\).*' -print -delete 2>/dev/null
    done
  fi

  targets=$(docker images -q -f reference='benchbot/*:*')
  if [ ! -z "$targets" ] ; then 
    echo "Removing BenchBot Docker resources ..."
    docker rmi $targets; 
  fi

  rm -rfv "$PATH_API" "$PATH_EXAMPLES" "$PATH_EVAL" 2>/dev/null
  sudo rm -v "$PATH_SYMLINKS"/benchbot* 2>/dev/null

  echo -e "\nFinished uninstalling!"
}

################################################################################
############################# Installation process #############################
################################################################################

# Cleanup terminal colours whenever exiting
trap cleanup_terminal EXIT

# Safely parse options input
input=$@
parse_out=$(getopt -o hb:e:fuv \
  --long help,branch:,envs-url:,force-clean,uninstall,no-update,version \
  -n "$(basename "$abs_path")" -- "$@")
if [ $? != 0 ]; then exit 1; fi
eval set -- "$parse_out"
updates_skip=
envs_urls=()
while true; do
  case "$1" in
    -h|--help)
      echo "$usage_text" ; exit 0 ;;
    -b|--branch)
      # This is a real dirty way to do this... sorry
      BRANCH_DEFAULT="$2"; shift 2
      echo "Using branch '$BRANCH_DEFAULT' instead of the default!" ;;
    -e|--envs-url)
      envs_urls+=("$2"); shift 2 ;;
    -f|--force-clean)
      uninstall_benchbot; shift ;;
    -u|--uninstall)
      uninstall_benchbot; exit ;;
    -v|--version)
      print_version_info; exit ;;
    --no-update)
      updates_skip=1; shift ;;
    --)
      shift ; break ;;
    *)
      echo "$(basename "$abs_path"): option '$1' is unknown"; shift ; exit 1 ;;
  esac
done

# Use the default environments URL if none was provided, & sort them so some of
# our Docker caching & env checking later on has an easier time
if [ -z "$envs_urls" ]; then
  envs_urls=("${URLS_ENVS_INFO_DEFAULT[@]}")
fi
envs_urls=($(echo "${envs_urls[@]}" | tr ' ' '\n' | sort | tr '\n' ' '))

# Pre-install
if [ -z "$updates_skip" ]; then
  header_block "CHECKING BENCHBOT SCRIPTS VERSION" ${colour_blue}

  echo -e "\nFetching latest hash for Benchbot scripts ... "
  _benchbot_info=$(is_latest_benchbot $BRANCH_DEFAULT)
  is_latest=$?
  benchbot_latest_hash=$(echo "$_benchbot_info" | latest_version_info | \
    cut -d ' ' -f 1)
  echo -e "\t\t$benchbot_latest_hash."

  if [ $is_latest -eq 0 ]; then 
    echo -e "\n${colour_green}BenchBot scripts are up-to-date.${colour_nc}"
  elif [ $is_latest -eq 1 ]; then
    echo -e "\n${colour_yellow}BenchBot scripts are outdated. Updating &"\
      "restarting install script ...\n${colour_nc}"
    git fetch --all && git stash && git checkout "$benchbot_latest_hash"
    echo -e "\n${colour_yellow}Done.${colour_nc}"
    popd > /dev/null && exec $0 $input --no-update
  else
    echo -e "$_benchbot_info"
    exit 1
  fi
fi

# PART 1: Ensuring the system state is compatible with BenchBot
header_block "PART 1: EXAMINING SYSTEM STATE" $colour_blue

# Iterate through the list of checks, doing some dirty string based variable
# extraction in the handle_requirement() function...
for c in "${checks_list_pre[@]}"; do
  if [[ "$c" =~ :$ ]]; then
    printf "\n${colour_blue}$c${colour_nc}\n"
  else
    handle_requirement "$c"
    res=$?
    if [ $res -eq 2 ]; then
      popd > /dev/null && exec $0 $input --no-update
    elif [ $res -eq 1 ]; then
      exit 1
    fi
  fi
done

printf "\n\n"
clear_stdin
read -n 1 -r -p \
  "All requirements & dependencies fulfilled; proceed with install (y/N)? "\
  prompt
printf "\n"
if [[ "$prompt" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
  printf "Proceeding with install ... \n\n"
else
  printf "Install aborted.\n\n"
  exit 1
fi

# PART 2: Fetching information about latest benchbot versions
header_block "PART 2: FETCHING LATEST BENCHBOT VERSION INFO" $colour_blue

# Get the latest commit hashes for each of our git repos
echo -e "\nFetching latest hash for BenchBot Simulator ... "
benchbot_simulator_hash=$(is_latest_benchbot_simulator $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_simulator_hash."
echo "Fetching latest hash for BenchBot Supervisor ... "
benchbot_supervisor_hash=$(is_latest_benchbot_supervisor $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_supervisor_hash."
echo "Fetching latest hash for BenchBot API ... "
benchbot_api_hash=$(is_latest_benchbot_api $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_api_hash."

# Get md5sum of the latest from the provided envs_url
echo -e "\nFetching md5sum & URL for latest version of environments ... "
benchbot_envs_md5sums=()
benchbot_envs_urls=()
for i in "${!envs_urls[@]}"; do
  u="${envs_urls[$i]}"
  echo -e "\t$u ... "

  _info=$(is_latest_benchbot_envs "$u" "$i" | latest_version_info)
  _md5sum=$(echo "$_info" | cut -d ' ' -f1)
  _url=$(echo "$_info" | cut -d ' ' -f2)
  if [ -z "$_md5sum" ] || [[ ! "$_md5sum" =~ ^[a-f0-9]{32}$ ]]; then
    echo -e "\n\nERROR: Failed to fetch valid md5sum for environments"
    echo "${envs_err/'$envs_url'/$u}"
    exit 1
  elif [ -z "$_url" ] || \
      [[ ! "$_url" =~ ^https://[-A-Za-z0-9\+@#/%?=~_|:,.";&!"]*$ ]]; then
    echo -e "\n\nERROR: Failed to fetch valid URL for environments"
    echo "${envs_err/'$envs_url'/$u}"
    exit 1
  fi

  benchbot_envs_md5sums+=("$_md5sum")
  benchbot_envs_urls+=("$_url")
  echo -e "\t\tDone."
done

# PART 3: Build docker images (both simulator & submission base image)
header_block "PART 3: BUILDING DOCKER IMAGES" $colour_blue

# Get some useful variables from the host
nvidia_driver_version=$(apt list --installed 2>/dev/null | \
  grep "nvidia-driver-" | cut -d ' ' -f 2)
cuda_drivers_version=$(apt list --installed 2>/dev/null | \
  grep "cuda-drivers/" | cut -d ' ' -f 2)
cuda_version=$(apt list --installed 2>/dev/null | \
  grep "cuda-[0-9].*$(cat /usr/local/cuda/version.txt | cut -d ' ' -f 3)" | \
  cut -d ' ' -f 2)
sdk_file=$(realpath --relative-to="$PATH_ROOT" $(eval "$chk_isaac_check"))

# Build the BenchBot Core Docker image
printf "\n${colour_blue}%s${colour_nc}\n" \
  "BUILDING BENCHBOT CORE DOCKER IMAGE:"
docker build -t "$DOCKER_TAG_CORE" -f "$PATH_DOCKERFILE_CORE" \
  --build-arg TZ=$(cat /etc/timezone) \
  --build-arg NVIDIA_DRIVER_VERSION="${nvidia_driver_version}" \
  --build-arg CUDA_DRIVERS_VERSION="${cuda_drivers_version}" \
  --build-arg CUDA_VERSION="${cuda_version}" $PATH_ROOT
build_ret=$?
if [ $build_ret -ne 0 ]; then
  printf "\n${colour_red}%s: %d\n\n${build_err}${colour_nc}\n" \
    "ERROR: Building BenchBot \"core\" returned a non-zero error code" \
    "$build_ret"
  exit 1
fi

# Build the BenchBot Simulator Docker image
printf "\n${colour_blue}%s${colour_nc}\n" \
  "BUILDING BENCHBOT SIMULATOR DOCKER IMAGE:"
docker build -t "$DOCKER_TAG_SIMULATOR" -f "$PATH_DOCKERFILE_SIMULATOR" \
  --build-arg ISAAC_SDK_TGZ="${sdk_file}" \
  --build-arg BENCHBOT_ENVS_MD5SUMS="${benchbot_envs_md5sums[*]}" \
  --build-arg BENCHBOT_ENVS_URLS="${benchbot_envs_urls[*]}" \
  --build-arg BENCHBOT_ENVS_SRCS="${envs_urls[*]}" \
  --build-arg BENCHBOT_SIMULATOR_GIT="${GIT_SIMULATOR}" \
  --build-arg BENCHBOT_SIMULATOR_HASH="${benchbot_simulator_hash}" \
  --build-arg BENCHBOT_SUPERVISOR_GIT="${GIT_SUPERVISOR}" \
  --build-arg BENCHBOT_SUPERVISOR_HASH="${benchbot_supervisor_hash}" $PATH_ROOT
build_ret=$?
if [ $build_ret -ne 0 ]; then
  printf "\n${colour_red}%s: %d\n\n${build_err}${colour_nc}\n" \
    "ERROR: Building BenchBot \"simulator\" returned a non-zero error code" \
    "$build_ret"
  exit 1
fi

# Pull out ground truth files from the simulator
rm -rf "$PATH_GROUND_TRUTH"
for i in "${!envs_urls[@]}"; do
  location=$(docker run --name ground_truth "$DOCKER_TAG_SIMULATOR" /bin/bash -c \
    'echo "$BENCHBOT_ENVS_PATH/'$i'/'$FILENAME_ENV_GROUND_TRUTH'"')
  docker cp ground_truth:"$location" "$PATH_GROUND_TRUTH" 
done

# Build the BenchBot Submission Docker image
printf "\n${colour_blue}%s${colour_nc}\n" \
  "BUILDING BENCHBOT SUBMISSION DOCKER IMAGE:"
docker build -t "$DOCKER_TAG_SUBMISSION" -f "$PATH_DOCKERFILE_SUBMISSION" \
  --build-arg BENCHBOT_API_GIT="${GIT_API}" \
  --build-arg BENCHBOT_API_HASH="${benchbot_api_hash}" $PATH_ROOT
build_ret=$?
if [ $build_ret -ne 0 ]; then
  printf "\n${colour_red}%s: %d" \
  printf "\n${colour_red}%s: %d\n\n${build_err}${colour_nc}\n" \
    "ERROR: Building BenchBot \"submission\" returned a non-zero error code" \
    "$build_ret"
  exit 1
fi

# Cleanup any unnecessary / outdated BenchBot components still lying around
printf "\n${colour_blue}%s${colour_nc}\n" \
  "CLEANING UP OUTDATED BENCHBOT REMNANTS:"
kill_benchbot "quiet"

# PART 4: Running post build checks
header_block "PART 4: RUNNING POST-BUILD HOST CHECKS" $colour_blue

for c in "${checks_list_post[@]}"; do
  if [[ "$c" =~ :$ ]]; then
    printf "\n${colour_blue}$c${colour_nc}\n"
  else
    handle_requirement "$c" 1
    if [ $? -ne 0 ]; then
      exit 1
    fi
  fi
done

# We are finally done...
echo -e "\nFinished!"
