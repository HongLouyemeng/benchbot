#!/usr/bin/env bash

################################################################################
################### Load Helpers & Global BenchBot Settings ####################
################################################################################

abs_path=$(readlink -f $0)
pushd $(dirname $abs_path) > /dev/null
source .helpers

################################################################################
########################### Script Specific Settings ###########################
################################################################################

not_found_text="NOT FOUND"

# Requirements as an array of (required, recommended)
nvidia_driver_version_reqs=("418" "430")
cuda_version_reqs=("10.0" "10.1")
docker_version_reqs=("19.03" "19.03.2")
nvidia_container_reqs=("1.0" "1.0.5")

# Free space recommendations
free_space_recs=("256G", 256000000)

# File search schemes (array of md5sum, grep calls... the grep calls TRUMP md5sum)
sdk_file_search=("06387f9c7a02afa0de835ef07927aadf" "grep 'sdk'")

# Hostnames
hostnames_header="# BENCHBOT SPECIFIC HOSTNAMES"
hostnames_list=\
"$URL_ROS $HOSTNAME_ROS
$URL_SIMULATOR $HOSTNAME_SIMULATOR
$URL_SUPERVISOR $HOSTNAME_SUPERVISOR"

# Command for install symlinks
symlink_cmd='sudo ln -svf '"$(dirname $abs_path)"'/* '"$PATH_SYMLINKS"

################################################################################
########################### Definitions for messages ###########################
################################################################################
usage_text="$(basename "$abs_path") -- Install script for the BenchBot software stack

USAGE:

    Install the software stack:
        $(basename "$abs_path") 

    Install from scratch, & skip check for the latest software stack:
        $(basename "$abs_path") --no-update [-f|--force-clean]

    Uninstall the software stack:
        $(basename "$abs_path") [-u|--uninstall]

OPTION DETAILS:

    -h,--help
            Show this help menu.

    -e,--envs-url
            Specify a custom URL to look for an \"environment information file\".
            An \"environment information file\" is a single line file with space-
            separated fields: MD5 checksum of environments *.zip, URL pointing
            to the environments *.zip, & plaintext version details. A general
            user should never need this flag.

    -f,--force-clean
            Forces an install of the BenchBot software stack from scratch. It
            will run uninstall, then the full install process.

    --no-update
            Skip checking for updates to the BenchBot software stack, & instead
            jump straight into the installation process.

    -u,--uninstall
            Uninstall the BenchBot software stack from the machine. All BenchBot
            related Docker images will be removed from the system, the API 
            removed from pip, & downloaded files removed from the BenchBot
            install. This flag is incompatible with all other flags.

FURTHER DETAILS:
    
    Please contact the authors of BenchBot for support or to report bugs:
        b.talbot@qut.edu.au
    "

build_err="\
  Ensure that Docker has been installed correctly AND that you can run Docker 
  WITHOUT root access (there is no need to ever run Docker with root). See 
  https://docs.docker.com/install/linux/linux-postinstall/ for details on how to 
  fix this. Run something like the following to test Docker works without root:

    docker images
"
cuda_err="\
  Cuda Runtime version did not meet the minimum requirements:

    At least version ${cuda_version_reqs[0]} is required to run BenchBot; please install 
    a suitable version on your host system. The recommended method for installing is the 
    following commands:

      wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
      sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
      sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
      sudo add-apt-repository \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /\"
      sudo apt-get update
      sudo apt-get install cuda-10-1
"
docker_err="\
  Docker version did not meet the minimum requirements:

    At least version ${docker_version_reqs[0]} is required to run BenchBot;
    please install a suitable version on your host system. The recommended
    method for installing is the following commands:

      sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"
      sudo apt-get update
      sudo apt-get install docker-ce

    When you are done, ensure that you can run Docker WITHOUT root (running Docker
    with root is a massive security issue & this install script deliberately does
    not do that). Add your username to the Docker group to enable running
    without root (will require re-login after):

      sudo groupadd docker
      sudo usermod -aG docker $USER
"
envs_err="\
  Ensure that URL: "'$envs_url'"
  points to a single-line text file with whitespace-separated fields. The first 
  field contains the md5sum of the latest envs_*.zip, second field is URL of 
  envs_*.zip, final field (optional) is YYYYMMDD timestamp of zip. A working 
  internet connection also helps!
"
free_space_warn="\

  NOTE: this warning can be safely ignored if you have moved Docker to a different
  partition (as outlined below), or believe that you will be able to fit the
  container on the '/' partition.

  You appear not to have enough free space on your root partition (mounted at '/'):

    If the install process runs out of space, it will fail unexpectedly. If space
    is limited in your root partition, it is recommended that you change where
    Docker stores its images to a partition with enough space. To change where
    Docker stores images:

      sudo systemctl stop docker
      sudo mv /var/lib/docker /<location_on_secondary_drive>
      sudo ln -sv /<location_on_secondary_drive> /var/lib/docker
      sudo systemctl start docker
"
hosts_prompt="\
Your hosts file does not appear to have the required hostnames added. To run
BenchBot solutions natively on your machine (as opposed to containerised), 
your host system needs to know about some Docker specific hostnames:

$hostnames_list
"
nvidia_driver_err="\
  Nvidia Graphics Driver version did not meet minimum requirements:

    At least version ${nvidia_driver_version_reqs[0]} is required to run 
    BenchBot; please install a suitable version on your host system. The 
    recommended method for installing is the following command:

      sudo apt install nvidia-driver-430
"
nvidia_container_err="\
  Could not find a valid version of the Nvidia Container toolkit:

    At least version ${nvidia_container_reqs[0]} is required to run Benchbot
    with GPU support; please install following the instructions on the project
    GitHub page: https://github.com/NVIDIA/nvidia-docker. In short:

      curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
      curl -s -L https://nvidia.github.io/nvidia-docker/$(. /etc/os-release;echo $ID$VERSION_ID)/nvidia-docker.list \\
        | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

      sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
      sudo systemctl restart docker
  "
sdk_file_err="\
  Isaac SDK was not found in the './isaac/' directory:

    A *.tgz file was not found in the './isaac/' directory that matched the
    below MD5sum, or was a unique return for the below grep statement:
        ${sdk_file_search[0]}
        ${sdk_file_search[1]}

    Download the latest version of the corresponding file at the website below
    (you will have to create an account, accept a license, & sign in first):
        https://developer.nvidia.com/isaac/downloads
"
symlink_prompt="\
Symlinks in '$PATH_SYMLINKS' could not be found for the 3 programs (benchbot_install,
benchbot_run, & benchbot_submit). Adding these programs to your path makes running
BenchBot solutions significantly easier to work with. They can be added via the 
command:

   $symlink_cmd 
"

################################################################################
######################## Helper functions for commands #########################
################################################################################

function install_component() {
  name=$(basename "$1")
  if [ ! -d "$1" ] ; then
    echo -e "\n${colour_blue}INSTALLING ${name^^} ...${colour_nc}"
    git clone "$2" "$1" 
  fi
  echo -e "\n${colour_blue}UPDATING ${name^^} ...${colour_nc}"
  pushd "$1"
  git fetch --all
  git checkout "$($3 $BRANCH_DEFAULT | latest_version_info | cut -d ' ' -f 1)"
  if [ ! -z "$4" ]; then eval "$4"; fi
  popd
}

function print_version() {
  cs=($colour_green $colour_yellow $colour_red)
  printf '%-25s' "$1"; printf "${cs[$5]}%-15s" "$2";
  printf "($3+ required, $4 recommended)${colour_nc}\n"
}

function print_free_space() {
  cs=($colour_green $colour_yellow)
  printf '%-25s' "$1"; printf "${cs[$4]}%-15s" "$2"; printf "($3 recommended)${colour_nc}\n"
}

function print_locate() {
  cs=($colour_green $colour_red)
  printf '%-25s' "$1"; printf "${cs[$3]}%-15s${colour_nc}\n" "$([ $3 -eq 0 ] && echo "$2" || echo "$not_found_text")";
}

function uninstall_benchbot() {
  kill_benchbot

  header_block "UNINSTALLING BENCHBOT" ${colour_blue}
  pip uninstall -y benchbot_api
  targets=$(docker images -q -f reference='benchbot/*:*')
  if [ $(echo -n "$targets" | wc -l) -gt 0 ] ; then docker rmi $targets; fi

  rm -rf {"$PATH_API","$PATH_EXAMPLES"} # TODO add eval to this

  echo -e "\nFinished uninstalling!"
}

################################################################################
############################# Installation process #############################
################################################################################

# Safely parse options input
input=$@
parse_out=$(getopt -o hb:e:fu --long help,branch:,envs-url:,force-clean,uninstall,no-update \
  -n "$(basename "$abs_path")" -- "$@")
if [ $? != 0 ]; then exit 1; fi
eval set -- "$parse_out"
updates_skip=
envs_url=$URL_ENVS_INFO_DEFAULT
while true; do
  case "$1" in
    -h|--help)
      echo "$usage_text" ; exit 0 ;;
    -b|--branch)
      # This is a real dirty way to do this... sorry
      BRANCH_DEFAULT="$2"; shift 2
      echo "Using branch '$BRANCH_DEFAULT' instead of the default!" ;;
    -e|--envs-url)
      envs_url="$2"; echo "TODO envs_url untested & password unimplemented..."
      shift 2 ;;
    -f|--force-clean)
      uninstall_benchbot; shift ;;
    -u|--uninstall)
      uninstall_benchbot; exit ;;
    --no-update)
      updates_skip=1; shift ;;
    --)
      shift ; break ;;
    *)
      echo "$(basename "$abs_path"): option '$1' is unknown"; shift ; exit 1 ;;
  esac
done

# Pre-install
if [ -z "$updates_skip" ]; then
  header_block "CHECKING BENCHBOT SCRIPTS VERSION" ${colour_blue}

  echo -e "\nFetching latest hash for Benchbot scripts ... "
  _benchbot_info=$(is_latest_benchbot $BRANCH_DEFAULT)
  is_latest=$?
  benchbot_latest_hash=$(echo "$_benchbot_info" | latest_version_info | \
    cut -d ' ' -f 1)
  echo -e "\t\t$benchbot_latest_hash."

  if [ $is_latest -eq 0 ]; then 
    echo -e "\n${colour_green}BenchBot scripts are up-to-date.${colour_nc}"
  elif [ $is_latest -eq 1 ]; then
    echo -e "\n${colour_yellow}BenchBot scripts are outdated. Updating &"\
      "restarting install script ...\n${colour_nc}"
    git fetch --all && git stash && git checkout "$benchbot_latest_hash"
    echo -e "\n${colour_yellow}Done.${colour_nc}"
    exec $0 $input --no-update
  else
    echo -e "$_benchbot_info"
    exit 1
  fi
fi

# PART 1: Report the current state of the system
header_block "PART 1: EXAMINING SYSTEM STATE" $colour_blue

# Get all of your stats, & whether they are valid for proceeding with the install
nvidia_driver_version=$(cat /proc/driver/nvidia/version 2>/dev/null | sed '/NVRM version/!d; s/.*Kernel Module *\([0-9.]*\).*/\1/')
if [ -z ${nvidia_driver_version} ]; then nvidia_driver_version="$not_found_text"; fi
cuda_version=$(apt list --installed 2>/dev/null | sed '/cuda-[0-9]*-[0-9]*/!d' | awk '{print $2}')
if [ -z ${cuda_version} ]; then cuda_version="$not_found_text"; fi
cuda_version_short=$(echo "$cuda_version" | grep -o '^[0-9]*\.[0-9]*' | tr . -)
docker_version=$(docker --version 2>/dev/null | sed 's/Docker version \([^ ,]*\).*/\1/')
if [ -z ${docker_version} ]; then docker_version="$not_found_text"; fi
nvidia_container_version=$(apt list --installed 2>/dev/null | grep 'nvidia-container-toolkit' | awk '{print $2}')
if [ -z ${nvidia_container_version} ]; then nvidia_container_version="$not_found_text"; fi

nvidia_driver_valid=$(eval_version $nvidia_driver_version ${nvidia_driver_version_reqs[*]})
cuda_valid=$(eval_version $cuda_version ${cuda_version_reqs[*]})
docker_valid=$(eval_version $docker_version ${docker_version_reqs[*]})
nvidia_container_valid=$(eval_version $nvidia_container_version ${nvidia_container_reqs[*]})

free_space_drive=$(df | grep '% /$' | awk '{print $1}')
free_space_human=$(df -H | grep '% /$' | awk '{print $4}')
free_space_blocks=$(df | grep '% /$' | awk '{print $4}')

[ $free_space_blocks -gt ${free_space_recs[1]} ]
free_space_valid=$?

sdk_file=$(realpath --relative-to="$PATH_ROOT" \
  $(find_file "$PATH_ISAAC_SRCS" "${sdk_file_search[0]}" "${sdk_file_search[1]}"))
[ $(eval_found "$sdk_file") -lt 1 ]
sdk_file_valid=$?

# Print out what we found & what we thought
print_version "Nvidia driver version:" "$nvidia_driver_version" ${nvidia_driver_version_reqs[*]} $nvidia_driver_valid
print_version "Cuda runtime version:" "$cuda_version" ${cuda_version_reqs[*]} $cuda_valid
print_version "Docker version:" "$docker_version" ${docker_version_reqs[*]} $docker_valid
print_version "Nvidia Docker version:" "$nvidia_container_version" ${nvidia_container_reqs[*]} $nvidia_container_valid
printf "\n"
print_free_space "Free space in '/':" "$free_space_human" ${free_space_recs[0]} $free_space_valid
printf "\n"
print_locate "Isaac SDK:" "$sdk_file" $sdk_file_valid
printf "\n\n"

# Either proceed or let them know why we won't be
# (note ordering here is important!)
err_string=""
if [ $nvidia_driver_valid -gt 0 ]; then err_string+="ERROR:$nvidia_driver_err\n\n"; fi
if [ $cuda_valid -gt 0 ]; then err_string+="ERROR:$cuda_err\n\n"; fi
if [ $docker_valid -gt 0 ]; then err_string+="ERROR:$docker_err\n\n"; fi
if [ $nvidia_container_valid -gt 0 ]; then err_string+="ERROR:$nvidia_container_err\n\n"; fi
if [ $sdk_file_valid -gt 0 ]; then err_string+="ERROR:$sdk_file_err\n\n"; fi

warn_string=""
if [ $free_space_valid -gt 0 ]; then warn_string+="WARN:$free_space_warn\n\n"; fi

if [ -n "$err_string" ]; then
  echo -e "${colour_red}Installation will not proceed due to the following unmet requirements / dependencies:\n"
  echo -e "${err_string}"
  echo -e "Please address each of the above issues before installing BenchBot.${colour_nc}"
  exit 1
fi
if [ -n "$warn_string" ]; then
  echo -e "${colour_yellow}$warn_string${colour_nc}"
fi
if [ -z "$err_string" ]; then
  read -p "All requirements & dependencies fulfilled; proceed with install (y/n)? " prompt
      if [[ "$prompt" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
        echo "Proceeding with install ..."
      else
        echo "Install aborted."
        exit 1
      fi
fi

echo ""
echo "TODO: Should we be enforcing 18.04?"

# PART 2: Fetching information about latest benchbot versions
header_block "PART 2: FETCHING LATEST BENCHBOT VERSION INFO" $colour_blue

# Get the latest commit hashes for each of our git repos
echo -e "\nFetching latest hash for BenchBot Simulator ... "
benchbot_simulator_hash=$(is_latest_benchbot_simulator $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_simulator_hash."
echo "Fetching latest hash for BenchBot Supervisor ... "
benchbot_supervisor_hash=$(is_latest_benchbot_supervisor $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_supervisor_hash."
echo "Fetching latest hash for BenchBot API ... "
benchbot_api_hash=$(is_latest_benchbot_api $BRANCH_DEFAULT | \
  latest_version_info)
echo -e "\t\t$benchbot_api_hash."

# Get md5sum of the latest from the provided envs_url
echo -e "\nFetching md5sum & URL for latest version of environments ... "
_envs_latest_info=$(is_latest_benchbot_envs | latest_version_info)
benchbot_envs_md5sum=$(echo "$_envs_latest_info" | cut -d' ' -f1)
benchbot_envs_url=$(echo "$_envs_latest_info" | cut -d' ' -f2)
if [ -z "$benchbot_envs_md5sum" ] || \
    [[ ! "$benchbot_envs_md5sum" =~ ^[a-f0-9]{32}$ ]]; then
  echo -e "\n\nERROR: Failed to fetch valid md5sum for environments"
  echo "${envs_err/'$envs_url'/$envs_url}"
  exit 1
elif [ -z "$benchbot_envs_url" ] || \
    [[ ! "$benchbot_envs_url" =~ ^https://[-A-Za-z0-9\+@#/%?=~_|:,.";&!"]*$ ]]; then
  echo -e "\n\nERROR: Failed to fetch valid URL for environments"
  echo "${envs_err/'$envs_url'/$envs_url}"
  exit 1
fi
echo -e "\t\tDone."

# PART 3: Build docker images (both simulator & submission base image)
header_block "PART 3: BUILDING DOCKER IMAGES" $colour_blue

docker build -t "$DOCKER_TAG_SIMULATOR" -f "$PATH_DOCKERFILE_SIMULATOR" \
  --build-arg TZ=$(cat /etc/timezone) \
  --build-arg NVIDIA_DRIVER_VERSION="${nvidia_driver_version}" \
  --build-arg CUDA_VERSION="${cuda_version}" \
  --build-arg CUDA_VERSION_SHORT="${cuda_version_short}" \
  --build-arg ISAAC_SDK_TGZ="${sdk_file}" \
  --build-arg BENCHBOT_ENVS_MD5SUM="${benchbot_envs_md5sum}" \
  --build-arg BENCHBOT_ENVS_URL="${benchbot_envs_url}" \
  --build-arg BENCHBOT_SIMULATOR_GIT="${GIT_SIMULATOR}" \
  --build-arg BENCHBOT_SIMULATOR_HASH="${benchbot_simulator_hash}" \
  --build-arg BENCHBOT_SUPERVISOR_GIT="${GIT_SUPERVISOR}" \
  --build-arg BENCHBOT_SUPERVISOR_HASH="${benchbot_supervisor_hash}" $PATH_ROOT
build_ret=$?
if [ $build_ret -ne 0 ]; then
  echo -e "\n${colour_red}ERROR: Building \"simulator\" returned a non-zero error code: $build_ret"
  echo -e "\n$build_err${colour_nc}"
  exit 1
fi

docker build -t "$DOCKER_TAG_SUBMISSION" -f "$PATH_DOCKERFILE_SUBMISSION" \
  --build-arg BENCHBOT_API_GIT="${GIT_API}" \
  --build-arg BENCHBOT_API_HASH="${benchbot_api_hash}" $PATH_ROOT
build_ret=$?
if [ $build_ret -ne 0 ]; then
  echo -e "\n${colour_red}ERROR: Building \"simulator\" returned a non-zero error code: $build_ret"
  echo -e "\n$build_err${colour_nc}"
  exit 1
fi

# PART 4: Installing local componenets
header_block "PART 4: INSTALLING LOCAL COMPONENTS" $colour_blue

install_component "$PATH_API" "$GIT_API" 'is_latest_benchbot_api' \
  'pip install -e .'
install_component "$PATH_EXAMPLES" "$GIT_EXAMPLES" \
  'is_latest_benchbot_examples' 'pip install -r requirements.txt'
# TODO
# install_component "eval" 

# PART 5: Run post build actions
header_block "PART 5: RUNNING POST-INSTALL ACTIONS" $colour_blue

# Adding Docker specific hostnames to /etc/hosts
# TODO this detection should probably be done by 'getent hosts <name>'... 
if ! grep -xq "$hostnames_header" /etc/hosts; then
  echo -e "${colour_yellow}$hosts_prompt${colour_nc}"
  read -p "Add the above hosts to '/etc/hosts' (sudo required) (y/n)? " prompt
  if [[ "$prompt" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    echo -e "$hostnames_header\n$hostnames_list" | sudo tee -a /etc/hosts
    echo "Done."
  else
    echo "Skipped."
  fi
fi

# Install symlinks if they aren't found
if [ ! -e "$PATH_SYMLINKS/benchbot_install" ] || \
    [ ! -e "$PATH_SYMLINKS/benchbot_run" ] || \
    [ ! -e "$PATH_SYMLINKS/benchbot_submit" ]; then
  echo -e "${colour_yellow}$symlink_prompt${colour_nc}"
  read -p "Add the symlinks by running the above command (sudo required) (y/n)? " prompt
  if [[ "$prompt" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    eval $symlink_cmd
    echo "Done."
  else
    echo "Skipped."
  fi
fi

echo -e "\nAll post-install actions are complete."

header_block "SUCCESSFULLY INSTALLED BENCHBOT ONTO YOUR HOST SYSTEM" $colour_green

# We are finally done...
echo -e "\nFinished!"
